import React from "react";
import Head from "next/head";
import { useRouter } from "next/router";

import { RoomCreateResponse, Room } from "@port7/dock/lib/interfaces";
import { PageComponent } from "../types/page-component";
import { ProfileArea } from "../modules/landing/profile";
import { GameSelection } from "../modules/landing/game-selection";
import { useConn } from "@port7/hooks/use-conn";
import { setPreferredNickname, useUserStore } from "@port7/user";
import { showErrorToast } from "@port7/lib/show-error-toast";
import { apiBaseUrl } from "@port7/lib/constants";

const LETTERS_REGX = /^[a-zA-Z]+$/;

const HomePage: PageComponent<unknown> = () => {
  const conn = useConn();
  const router = useRouter();
  const landingNickname = useUserStore(state => state.user)?.nickname || "";
  const [nickname, setNickname] = React.useState(landingNickname);
  const [roomName, setRoomName] = React.useState(`${landingNickname}'s Room`);
  const [roomCode, setRoomCode] = React.useState("");
  const [isPrivate, setIsPrivate] = React.useState(false);

  const handleNicknameChange = (nickname: string) => {
    setNickname(nickname);
    setPreferredNickname(nickname);
  }

  const handleRoomCodeChange = (roomCode: string) => {
    if (roomCode.length > 4) return;
    if (!LETTERS_REGX.test(roomCode) && roomCode.length !== 0) return;
    setRoomCode(roomCode.toUpperCase());
  };

  const createRoom = async () => {
    let response = (await conn?.sendCall("room:create", {
      name: roomName,
      isPrivate: isPrivate,
      game: "rumble",
    })) as RoomCreateResponse;

    if (!response) {
      showErrorToast("Error sending message to server!");
      return;
    }

    if (response.errors) return;
    const room = response.data as Room;

    router.push(`/${room.code}`);
  };

  return (
    <>
      <Head>
        <title>Port7</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col w-full">
        <div className="top-0 h-20 w-full">
          <ProfileArea nickname={nickname} onNicknameChange={handleNicknameChange} />
        </div>
        <div className="w-full h-full flex">
          <div className="m-auto bg-primary-600 p-8 rounded-lg shadow-2xl flex flex-col">
            <div className="text-2xl text-primary-100 font-bold">Welcome</div>
            <div className="w-full flex flex-row mt-4">
              <div className="mr-36">
                <div className="text-xl text-primary-200 mb-2">
                  Create a room
                </div>
                <div className="flex flex-col">
                  <div className="font-bold text-primary-100 mb-4">
                    SELECT GAME
                  </div>
                  <div className="mb-10">
                    <GameSelection
                      name="Rumble"
                      description="Rummikub with extra niceties"
                      selected={true}
                    />
                    <GameSelection
                      name="Coming Soon..."
                      description="Games are always being added"
                      selected={false}
                      disabled
                    />
                  </div>
                  <input
                    className="h-10 px-3 mb-4 rounded-md focus:outline-none bg-transparent text-primary-100 ring-2 ring-primary-300 focus:ring-accent transition"
                    value={roomName}
                    onChange={(e) => setRoomName(e.currentTarget.value)}
                  />
                  <div className="w-full flex flex-row">
                    <button
                      onClick={() => setIsPrivate(!isPrivate)}
                      className="mr-1 bg-accent text-primary-100 w-1/2 p-2 font-bold rounded-md shadow-md hover:bg-accent-hover transition"
                    >
                      {isPrivate ? "PRIVATE" : "PUBLIC"}
                    </button>
                    <button
                      onClick={createRoom}
                      className="ml-1 bg-secondary text-primary-100 w-1/2 p-2 font-bold rounded-md shadow-md hover:bg-secondary-hover transition"
                    >
                      PLAY
                    </button>
                  </div>
                </div>
              </div>
              <div>
                <div className="text-xl text-primary-200 mb-2">Join a room</div>
                <div className="flex flex-col">
                  <div className="font-bold text-primary-100 mb-4">
                    ENTER ROOM CODE
                  </div>
                  <input
                    className="h-10 px-3 mb-4 max-w-sm rounded-md focus:outline-none bg-transparent text-primary-100 ring-2 ring-primary-300 focus:ring-accent transition"
                    placeholder="ABCD"
                    value={roomCode}
                    onChange={(e) =>
                      handleRoomCodeChange(e.currentTarget.value)
                    }
                  />
                  <button className="bg-secondary text-primary-100 p-2 font-bold rounded-md shadow-md hover:bg-secondary-hover transition" onClick={async () => {
                    const resp = await fetch(`${apiBaseUrl}/room/${roomCode}`).catch(() => {
                      showErrorToast(`Error fetching room ${roomCode}`);
                    });
                    if (!resp) return;
                    let json = await resp.json();
                    if ("room" in json) {
                      router.push(`/${roomCode}`);
                    } else if ("error" in json) {
                      showErrorToast(`Room ${roomCode} not found`);
                    }
                  }}>
                    JOIN
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

HomePage.ws = true;

export default HomePage;
